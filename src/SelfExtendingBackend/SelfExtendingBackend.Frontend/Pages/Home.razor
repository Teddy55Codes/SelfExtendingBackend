@page "/"
@inject HttpClient Http

<MudText Typo="Typo.h3">Prompt Generator</MudText>

<MudPaper Class="pa-4">
    <MudGrid>
        <MudItem xs="12" md="9">
            <MudTextField @bind-Value="promptText" Placeholder="Prompt..." Variant="Variant.Filled" FullWidth="true" />
        </MudItem>
        <MudItem xs="12" md="3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GeneratePrompt" FullWidth="true">
                Generate
            </MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

@if (responseMessage is not null)
{
    <MudAlert Severity="Severity.Success" Class="mt-3">
        <strong>Response: </strong>@responseMessage
    </MudAlert>
}



@if (urlList != null && urlList.Any())
{
    <ul>
        @foreach (var urlItem in urlList)
        {
            <li>
                <MudLink Href="@($"http://localhost:5000{urlItem.Url}")" Target="_blank">@urlItem.Url</MudLink>

            </li>
        }
    </ul>
}

@code {
    private string promptText;
    private string responseMessage;
    private List<UrlItem> urlList = new();


    protected override async Task OnInitializedAsync()
    {
        FetchUrls();
        await base.OnInitializedAsync();
    }


    // Class to hold the URL items
    public class UrlItem
    {
        public string Url { get; set; }
    }

    private async Task GeneratePrompt()
    {
        var request = new { Value = promptText };

        // Serialize the object to a JSON string
        var jsonRequest = System.Text.Json.JsonSerializer.Serialize(request);

        // Create the content for the POST request
        var content = new StringContent(jsonRequest, System.Text.Encoding.UTF8, "application/json");

        // Send the POST request
        var response = await Http.PostAsync("http://localhost:5000/new-endpoint", content);

        if (response.IsSuccessStatusCode)
        {
            responseMessage = await response.Content.ReadAsStringAsync();
            // Fetch URLs after the POST request completes successfully
            await FetchUrls();
        }
        else
        {
            responseMessage = "An error occurred: " + response.StatusCode;
        }
    }

    private async Task FetchUrls()
    {
        // GET request to fetch the list of URLs
        var response = await Http.GetAsync("http://localhost:5000/get-all-endpoints");

        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            
            // Deserialize the JSON response to the list of UrlItem
            urlList = System.Text.Json.JsonSerializer.Deserialize<List<UrlItem>>(jsonResponse, new System.Text.Json.JsonSerializerOptions
            {
                PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
            });

            StateHasChanged();
        }
        else
        {
            responseMessage = "Failed to fetch URLs.";
        }
    }
}
