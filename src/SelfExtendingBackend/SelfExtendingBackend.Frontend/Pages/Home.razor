@page "/"
@inject HttpClient Http

<MudPaper Class="pa-4">
    <MudGrid>
        <MudItem xs="12" md="9">
            <MudTextField @bind-Value="promptText" Placeholder="Prompt..." Variant="Variant.Filled" FullWidth="true" />
        </MudItem>
        <MudItem xs="12" md="3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GeneratePrompt" FullWidth="true">
                Generate
            </MudButton>
        </MudItem>
    </MudGrid>


@if (loading)
{
    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Size="Size.Medium" />
}


@if (success)
{
<MudAlert Severity="Severity.Success" Class="mt-3">
    <strong>Success </strong>
</MudAlert>
}

@if (errorMessage is not null)
{
    <MudAlert Severity="Severity.Error" Class="mt-3">
        <strong>Error: </strong>@errorMessage
    </MudAlert>
}

@if (urlList != null && urlList.Any())
{
    <MudGrid>
        @foreach (var urlItem in urlList)
        {
            <MudItem xs="12" md="6">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.body1">Prompt: @urlItem.Promt</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"http://localhost:5000{urlItem.Url}")" Target="_blank">
                            Go to @urlItem.Url
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

</MudPaper>

@code {
    private string promptText;
    private string errorMessage;
    private bool success;
    private bool loading;
    private List<UrlItem> urlList = new();


    protected override async Task OnInitializedAsync()
    {
        FetchUrls();
        await base.OnInitializedAsync();
    }


    // Class to hold the URL items
    public class UrlItem
    {
        public string Url { get; set; }
        public string Promt { get; set; }  // Adjusted to match the JSON "promt" field
    }

    private async Task GeneratePrompt()
    {
        errorMessage = null;
        success = false;
        loading = true;
        
        var request = new { Value = promptText };

        // Serialize the object to a JSON string
        var jsonRequest = System.Text.Json.JsonSerializer.Serialize(request);

        // Create the content for the POST request
        var content = new StringContent(jsonRequest, System.Text.Encoding.UTF8, "application/json");

        // Send the POST request
        var response = await Http.PostAsync("http://localhost:5000/new-endpoint", content);

        if (response.IsSuccessStatusCode)
        {
            success = true;
            // Fetch URLs after the POST request completes successfully
            await FetchUrls();
        }
        else
        {
            errorMessage = "An error occurred: " + response.StatusCode;
        }
        loading = false;
    }

    private async Task FetchUrls()
    {
        // GET request to fetch the list of URLs
        var response = await Http.GetAsync("http://localhost:5000/get-all-endpoints");

        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            
            // Deserialize the JSON response to the list of UrlItem, now including the "promt"
            urlList = System.Text.Json.JsonSerializer.Deserialize<List<UrlItem>>(jsonResponse, new System.Text.Json.JsonSerializerOptions
            {
                PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
            });

            StateHasChanged();
        }
        else
        {
            errorMessage = "Failed to fetch URLs.";
        }
    }
}
