@page "/process-roadmap"
@using Radzen
@using System.Collections.Generic
@using System.Timers
@using SelfExtendingBackend.Frontend.Models

<h3>Process Roadmap</h3>

<div class="roadmap">
    @if (Steps != null)
    {
        @foreach (var step in Steps)
        {
            <div class="step" style="background-color: @(GetColor(step.Status)); color: white;">
                <RadzenButton Text="@step.Name" />
                <RadzenDropDown TValue="string"
                                Data="@GetDropdownData(step.Status)"
                                Placeholder="Select status"
                                @bind-Value="@step.Status"
                                Change="@(args => UpdateStatus(step, args))" />
            </div>
        }

        <br/>
        <br/>
        <RadzenLabel Style="font-weight: bold; color: red">Failed Attempts: @_failedAttempts</RadzenLabel>
    }
    else
    {
        <p>No steps available.</p>
    }
</div>

<RadzenNotification />

<style>
    .roadmap {
        display: flex;
        flex-direction: column;
    }

    .step {
        margin-bottom: 10px;
        padding: 5px;
        border-radius: 5px;
    }
</style>

@code {
    [Parameter]
    public List<ProcessStep> Steps { get; set; } = new List<ProcessStep>();

    private int _failedAttempts;
    private Timer _resetTimer;

    [Inject]
    private NotificationService NotificationService { get; set; }

    protected override void OnInitialized()
    {
        // Mock data initialization
        Steps = new List<ProcessStep>
        {
            new ProcessStep { Name = "Send Prompt", Status = "in progress" },
            new ProcessStep { Name = "Received Response", Status = "waiting" },
            new ProcessStep { Name = "Compiling", Status = "waiting" },
        };

        // Initialize socket connection (pseudo-code)
        InitializeSocketConnection();

        // Initialize timer for UI reset
        _resetTimer = new Timer(3000);
        _resetTimer.Elapsed += ResetStatuses;
    }

    private void InitializeSocketConnection()
    {
        // Pseudo-code for setting up a socket connection
        // Example: using WebSocket or SignalR for real-time updates
        // On receiving a message, update the status and failed attempts
    }

    private string GetColor(string status)
    {
        return status switch
        {
            "ready" => "green",
            "failed" => "red",
            "in progress" => "gray",
            _ => "lightgray"
        };
    }

    private void UpdateStatus(ProcessStep step, object value)
    {
        step.Status = value.ToString();

        if (step.Status == "failed")
        {
            _failedAttempts++;
        }

        if (step.Name == "Compiling" && step.Status == "ready")
        {
            NotifySuccess();
            _resetTimer.Start();
        }

        StateHasChanged();
    }

    private List<string> GetDropdownData(string currentStatus)
    {
        return new List<string> { "ready", "failed", "in progress", "waiting" }.Where(s => s != currentStatus).ToList();
    }

    private void ResetStatuses(object sender, ElapsedEventArgs e)
    {
        foreach (var step in Steps)
        {
            step.Status = "waiting";
        }

        _failedAttempts = 0;

        InvokeAsync(() => StateHasChanged());

        _resetTimer.Stop();
    }

    private void NotifySuccess()
    {
        NotificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Success,
            Summary = "Success",
            Detail = "New API compiled successfully!",
            Duration = 3000
        });
    }
}